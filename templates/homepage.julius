

  // We used this design as a template:  https://bl.ocks.org/Andrew-Reid/a73f9af9ccd9ef901a0c33c624096049

  // We select our svg html element to display the pie chart, where we also defined the height and width
  var svg = d3.select("svg"),
      width = +svg.attr("width"),
      height = +svg.attr("height"),
      radius = Math.min(width, height) / 2,
      g = svg.append("g").attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");


d3.json("/static/json/langs.json", function (error,data) {

  // We create an ordinal color collection of size n so that when index [n+r] is chosen, the color is of index [r] (circular motion)
  var color = d3.scaleOrdinal(["#98abc5", "#8a89a6", "#7b6888", "#6b486b", "#a05d56", "#d0743c", "#ff8c00"]);

  var pie = d3.pie()
      .sort(null)
      .value(function(d) { return d.bytes; });

  var path = d3.arc()
      .outerRadius(radius - 10)
      .innerRadius(0);

  var label = d3.arc()
      .outerRadius(radius - 40)
      .innerRadius(radius - 70);

  var arc = g.selectAll(".arc")
      .data(pie(data))
      .enter().append("g")
        .attr("class", "arc");

  arc.append("path")
      .attr("d", path)
      .attr("fill", function(d,i) { return color(i); })
      .on("click",function(d) { 
        // The amount we need to rotate:
        var rotate = 180-(d.startAngle + d.endAngle)/2 / Math.PI * 180;
      
        // Transition the pie chart
        g.transition()
          .attr("transform",  "translate(" + width / 2 + "," + height / 2 + ") rotate(" + rotate + ")")
          .duration(1000);
      
      // Î¤ransition the labels:
      text.transition()
        .attr("transform", function(dd) {
          return "translate(" + label.centroid(dd) + ") rotate(" + (-rotate) + ")"; })
        .duration(1000);

      });

  var text = arc.append("text")
        .attr("transform", function(d) { return "translate(" + label.centroid(d) + ")"; })
        .attr("dy", "0.35em")
        .text(function(d) { return d.data.lang; });
})